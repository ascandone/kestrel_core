/// A type representing a value that could be either succesful or not.
pub(..) type Result<a, err> {
  Ok(a),
  Err(err),
}

/// Maps the result's `Ok` value using the given functions
/// 
/// ```kestrel
/// map(Ok(42), fn x { x + 1 }) // => Ok(43)
/// map(Err("err"), fn x { x + 1 }) // => Err("err")
/// ```
pub let map = |r, f| {
  match r {
    Ok(x) => Ok(f(x)),
    Err(err) => Err(err),
  }
}

/// Like [`Result.map`](#map), but applies to the `Err` value
pub let map_err = |r, f| {
  match r {
    Ok(x) => Ok(x),
    Err(err) => Err(f(err)),
  }
}

/// Maps the result's `Ok` value using the given functions, and flattens the results
/// 
/// It holds the property `and_then(x, Ok) == x`
/// ```kestrel
/// and_then(Err("err"), fn x { Ok(42) }) // => Err("err")
/// and_then(Err("err1"), fn x { Err("err2") }) // => Err("err2")
/// and_then(Ok(42), fn x { Err("err") }) // => Err("err")
/// and_then(Ok(42), fn x { Ok(x + 1) }) // => Ok(43)
/// ```
pub let and_then = |r, f| {
  match r {
    Ok(x) => f(x),
    Err(err) => Err(err),
  }
}
