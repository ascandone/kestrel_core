import Bool.{Bool(..), (>=), (<=), (==)}
import Int.{(+), (-)}
import Option.{Option(..)}
import Tuple.{Tuple2(..), Unit(..)}

/// This type represents a singly linked list
pub(..) type List<a> {
  Nil,
  Cons(a, List<a>),
}

/// `range(a, b)` is a list from `a` to `b` exclusive
/// 
/// ```kestrel
/// range(0, 3) // => [0, 1, 2]
/// ```
pub let range = fn from, to {
  if from >= to {
    []
  } else {
    from :: range(from + 1, to)
  }
}

/// Applies the given function to every element of the list, and return a new list
/// with the mapped elements.
/// It takes `O(n)` time
/// 
/// ```kestrel
/// map([1, 2, 3], fn x { x * 10 }) // => [10, 20, 30]
/// ```
pub let map = fn lst, f {
  match lst {
    Nil => [],
    hd :: tl => f(hd) :: map(tl, f),
  }
}

/// Returns a new list containing only the elements that match the given predicate, in the same order
/// It takes `O(n)` time
/// 
/// ```kestrel
/// filter(['a', 'b', 'c'], fn x { x == 'b' }) // => ['b']
/// ````
pub let filter = fn lst, pred {
  match lst {
    Nil => [],
    hd :: tl => if pred(hd) {
      hd :: filter(tl, pred)
    } else {
      filter(tl, pred)
    },
  }
}

pub let map2 = fn lst1, lst2, f {
  match (lst1, lst2) {
    (hd1 :: tl1, hd2 :: tl2) => f(hd1, hd2) :: map2(tl1, tl2, f),
    _ => [],
  }
}

pub let find = fn lst, pred {
  match lst {
    Nil => None,
    hd :: tl => if pred(hd) {
      Some(hd)
    } else {
      find(tl, pred)
    },
  }
}

pub let reduce = fn lst, acc, f {
  match lst {
    Nil => acc,
    hd :: tl => reduce(tl, f(acc, hd), f),
  }
}

pub let reduce_right = fn lst, acc, f {
  match lst {
    Nil => acc,
    hd :: tl => f(hd, reduce_right(tl, acc, f)),
  }
}

pub let concat = fn lst1, lst2 {
  reduce_right(lst1, lst2, Cons)
}

pub let sum_ints = fn lst {
  reduce(lst, 0, fn a, b {
    a + b
  })
}

pub let flatten = fn lst {
  reduce_right(lst, [], concat)
}

pub let flat_map = fn lst, f {
  lst
  |> map(f)
  |> flatten()
}

pub let filter_map = fn lst, f {
  reduce_right(lst, [], fn x, xs {
    match f(x) {
      None => xs,
      Some(hd) => hd :: xs,
    }
  })
}

pub let take = fn lst, n {
  match lst {
    Nil => [],
    hd :: tl => if n <= 0 {
      []
    } else {
      hd :: take(tl, n - 1)
    },
  }
}

pub let drop = fn lst, n {
  if n <= 0 {
    lst
  } else {
    match lst {
      Nil => [],
      _ :: tl => drop(tl, n - 1),
    }
  }
}

pub let is_empty = fn lst {
  match lst {
    Nil => True,
    _ :: _ => False,
  }
}

pub let length = fn lst {
  reduce(lst, 0, fn acc, _ {
    acc + 1
  })
}

pub let zip = fn lst1, lst2 {
  match (lst1, lst2) {
    (Nil, _) => [],
    (_, Nil) => [],
    (hd1 :: lst1, hd2 :: lst2) => (hd1, hd2) :: zip(lst1, lst2),
  }
}

/// Reverse a list.
pub let reverse = fn lst {
  List.reduce(lst, [], fn acc, x {
    x :: acc
  })
}

/// This function is meant to be used with `let#` syntax
/// ```kestrel
/// {
///   let#List.flat_map x = [1, 2];
///   let#List.flat_map y = ['a', 'b'];
///   let#List.guard _unit = x == 1;
///   [(x, y)]
/// }
/// ```
pub let guard = fn pred, body {
  if pred {
    body(Unit)
  } else {
    []
  }
}

/// Returns True wheter a list contains the given value.
/// `==` is used to match the item
pub let includes = fn lst, x {
  match lst {
    Nil => False,
    hd :: tl => if hd == x {
      True
    } else {
      includes(tl, x)
    },
  }
}
