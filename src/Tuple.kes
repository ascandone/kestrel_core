//// The `Tuple` module contains tuples utilities.
//// A sintax sugar for writing tuples is available,
//// e.g. `("a", "b")` will desugar to `Tuple.Tuple2("a", "b")` when used as a value, whereas
//// `(Int, Float)` will desguar to `Tuple.Tuple2<Int, Float>` when used as a type.

/// `Unit` is a `Tuple` with zero values. It only has one value: `Unit`
/// Can be used in a similar way to `undefined` in javascript, to represent values that do not
/// actually bring any meaningful information
/// 
/// For example:
/// * You can use the type `Result<Unit, String>` to represent values that can either fail (with a `String` error message)
/// or succeed, without yielding any particular value. This is more idiomatic that representing error as `Maybe<String>`
/// * You can use the type `Task<Unit>` to represent a computation the doesn't yield any value. This is actually the type required by the `main` value
/// 
/// **note** if you are trying to represent a value that can either be of the type `T` or undefined, `Maybe<T>` might be what you are looking for.
pub(..) type Unit {
  Unit,
}

/// A tuple containing 2 values
pub(..) type Tuple2<a, b> {
  Tuple2(a, b),
}

pub let first = |(x, _)| {
  x
}

pub let second = |(_, x)| {
  x
}

/// A tuple containing 3 values
pub(..) type Tuple3<a, b, c> {
  Tuple3(a, b, c),
}

/// A tuple containing 4 values
pub(..) type Tuple4<a, b, c, d> {
  Tuple4(a, b, c, d),
}
