//// This module contains a bunch of utilities for handling concurrency operations

import List
import MVar
import Result.{Result(..)}
import Task.{await}
import Tuple.{Unit(..)}

enum Position {
  First,
  Second,
}

/// Run the two tasks concurrently and collect the results.
///
/// ```kestrel
/// pub let main = {
///   let#await (a, b) = Async.both(
///     Task.map(Task.sleep(1000), fn _ {
///       0
///     }),
///     Task.map(Task.sleep(1000), fn _ {
///       1
///     }),
///   );
///   // Resolves with a=0 and b=1
///   // in 1 second instead of 2
///   Task.none
/// }
/// ```
pub let both = fn t1, t2 {
  let#await mvar = MVar.empty;
  let#await _id = Task.fork({
    let#await res = t2;
    MVar.put(mvar, res)
  });
  let#await value1 = t1;
  let#await value2 = MVar.take(mvar);
  Task.of((value1, value2))
}

/// Like [both](#both), but for more than two tasks
pub let all = fn tasks {
  List.reduce(tasks, Task.of([]), fn acc, t {
    let#await (acc, t) = Async.both(acc, t);
    Task.of([t, ..acc])
  })
}

enum Either<a, b> {
  Left(a),
  Right(b),
}

/// Run the two `Task`s concurrently.
/// Return `Ok` if both `Task`s succeeed, otherwise return `Err` with the first task that fails, and cancel the other.
pub let both_ok = fn t1, t2 {
  let#await mvar = MVar.empty;
  let#await left_id = Task.fork({
    let#await res = t1;
    MVar.put(mvar, Left(res))
  });
  let#await right_id = Task.fork({
    let#await res = t2;
    MVar.put(mvar, Right(res))
  });
  let expect_ok = {
    let#await either = MVar.take(mvar);
    match either {
      Left(Err(err)) => {
        let#await Unit = Task.kill(right_id);
        Task.of(Err(err))
      },
      Right(Err(err)) => {
        let#await Unit = Task.kill(left_id);
        Task.of(Err(err))
      },
      Left(Ok(value)) => Task.of(Ok(Left(value))),
      Right(Ok(value)) => Task.of(Ok(Right(value))),
    }
  };
  let#Task.await_ok first_result = expect_ok;
  match first_result {
    Left(left) => {
      let#Task.await_ok second_result = expect_ok;
      match second_result {
        Right(right) => Task.of(Ok((left, right))),
        Left(_) => both_ok(t1, t2),
      }
    },
    Right(right) => {
      let#Task.await_ok second_result = expect_ok;
      match second_result {
        Left(left) => Task.of(Ok((left, right))),
        Right(_) => both_ok(t1, t2),
      }
    },
  }
}

/// Like [both_ok](#both_ok), but for more than two tasks
pub let all_ok = fn tasks {
  List.reduce(tasks, Task.of(Ok([])), fn acc, t {
    let#await pair = Async.both_ok(acc, t);
    match pair {
      Ok((acc, t)) => Task.of(Ok([t, ..acc])),
      Err(e) => Task.of(Err(e)),
    }
  })
}

let race_2 = fn t1, t2 {
  let#await mvar = MVar.empty;
  let fork_task = fn t, position {
    Task.fork({
      let#await res = t;
      MVar.put(mvar, (res, position))
    })
  };
  let#await id1 = fork_task(t1, First);
  let#await id2 = fork_task(t2, Second);
  let#await (res, position) = MVar.take(mvar);
  let#await Unit = Task.kill(match position {
    First => id2,
    Second => id1,
  });
  Task.of(res)
}

/// Run the tasks concurrently and yield the value of the first `Task` to complete.
/// All the other tasks are cancelled.
///
/// ```kestrel
/// pub let main = {
///   let#await a = Async.race([
///     Task.map(Task.sleep(1000), fn _ {
///       0
///     }),
///     Task.map(Task.sleep(200), fn _ {
///       1
///     }),
///   ]);
///   // Resolves with a=1 in 200ms
///   Task.none
/// }
/// ```
pub let race = fn tasks {
  List.reduce(tasks, Task.never, race_2)
}
