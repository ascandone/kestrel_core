import Bool.{Bool}
import Option.{Option(..)}
import Task.{Task, await}
import Tuple.{Unit(..)}

/// A `MVar` is a synchronization primitive, useful for communicating from different forked tasks.
/// Represents a mutable cell that can either be empty or filled with a value of type `a`.
extern pub type MVar<a>

/// Create an empty `MVar`
@extern
@type Task<MVar<a>>
pub let empty

/// Put a value into the given `MVar`.
/// If the `MVar` is filled, it will block until it is possible to put.
@extern
@type (MVar<a>, a) -> Task<Unit>
pub let put

/// A non-blocking version of `put`. Try putting the value into the MVar,
/// returning `True` wheter the value was put, `False` otherwise.
@extern
@type (MVar<a>, a) -> Task<Bool>
pub let try_put

/// Non-blocking version of `put`.
/// Equivalent to wrapping a `put` inside a `Task.fork`
pub let put_async = fn mvar, value {
  Task.fork(put(mvar, value))
}

/// Take the value from the given `MVar`.
/// If the `MVar` is not filled, it will block until it is possible to take.
@extern
@type (MVar<a>) -> Task<a>
pub let take

/// A non-blocking version of `take`.
/// Returns `None` if the `MVar` was empty, `Option(a)` otherwise.
/// 
/// Note: after `try_take` the value is empty
@extern
@type (MVar<a>) -> Task<Option<a>>
pub let try_take

pub let read = fn mvar {
  let#await value = take(mvar);
  let#await Unit = put(mvar, value);
  Task.of(value)
}

pub let try_read = fn mvar {
  let#await value = try_take(mvar);
  match value {
    None => Task.of(None),
    Some(value) => {
      let#await Unit = put(mvar, value);
      Task.of(Some(value))
    },
  }
}

/// Create a `MVar` filled with the given value.
pub let of = fn a {
  let#await mvar = empty;
  let#await Unit = put(mvar, a);
  Task.of(mvar)
}

pub let update_returning = fn mvar, f {
  let#await value = take(mvar);
  let (returning, new_value) = f(value);
  let#await Unit = put(mvar, new_value);
  Task.of(returning)
}
