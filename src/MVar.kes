import Task.{Task, await}
import Tuple.{Unit(..)}

/// A `MVar` is a synchronization primitives, useful for communicating from different forked tasks.
/// Represents a mutable cell that can either be empty or filled with a value of type `a`.
extern pub type MVar<a>

/// Create an empty `MVar`
extern pub let empty: Task<MVar<a>>

/// Put a value into the given `MVar`.
/// If the `MVar` is filled, it will block until it is possible to put.
extern pub let put: Fn(MVar<a>, a) -> Task<Unit>

/// Non-blocking version of `put`.
/// Equivalent to wrapping a `put` inside a `Task.fork`
pub let put_async = fn mvar, value {
  Task.fork(put(mvar, value))
}

/// Take the value from the given `MVar`.
/// If the `MVar` is not filled, it will block until it is possible to take.
extern pub let take: Fn(MVar<a>) -> Task<a>

/// Create a `MVar` filled with the given value.
pub let of = fn a {
  let#await mvar = empty;
  let#await Unit = put(mvar, a);
  Task.of(mvar)
}

pub let update_returning = fn mvar, f {
  let#await value = take(mvar);
  let (returning, new_value) = f(value);
  let#await Unit = put(mvar, new_value);
  Task.of(returning)
}
