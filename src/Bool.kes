/// A boolean value that can either be `True` or `False`.
/// 
/// Note that this isn't a builtin type, but a regular union type
pub(..) type Bool {
  True,
  False,
}

/// Logic `and` between booleans
/// 
/// ```kestrel
/// True && True // => True
/// True && False // => False
/// False && True // => False
/// False && False // => False
/// ```
@extern
@type (Bool, Bool) -> Bool
pub let (&&)

/// Logic `or` between booleans
/// 
/// ```kestrel
/// True || True // => True
/// True || False // => True
/// False || True // => True
/// False || False // => False
/// ```
@extern
@type (Bool, Bool) -> Bool
pub let (||)

/// Logic `not`
/// 
/// ```kestrel
/// !True // => False
/// !False // => True
/// ```
@extern
@type (Bool) -> Bool
pub let (!)

/// Perform structural equality between values.
/// 
/// Requires values to implement the `Eq` trait, therefore
/// equality is only supported for values of type:
/// * `Int`
/// * `Float`
/// * `Char`
/// * `String`
/// * Union types whose constructors arguments support equality
/// 
/// This mean that equality is supported, for example, for values of type `List<(String, Char)>`
/// 
/// Equality between all the other values (for example functions or internal opaque types)
/// is forbidden by the type system
@extern
@type (a, a) -> Bool where a: Eq
pub let (==)

/// Same as `==`, but with negation
@extern
@type (a, a) -> Bool where a: Eq
pub let (!=)

@extern
@type (a, a) -> Bool where a: Ord
pub let (>)

@extern
@type (a, a) -> Bool where a: Ord
pub let (>=)

@extern
@type (a, a) -> Bool where a: Ord
pub let (<)

@extern
@type (a, a) -> Bool where a: Ord
pub let (<=)
