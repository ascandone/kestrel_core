import Char.{Char}
import Int.{Int}
import List.{List}
import Option.{Option}

/// A value representing an unicode string
extern pub type String

/// Concatenate two strings
/// 
/// ```kestrel
/// "abc" ++ "def" // => "abcdef"
/// ```
extern pub let (++): (String, String) -> String

/// Returns the length of the string.
/// It takes `O(1)` time
/// 
/// ```kestrel
/// length("abc") // => 3
/// ```
extern pub let length: (String) -> Int

extern pub let char_at: (String, Int) -> Option<Char>

extern pub let split: (String, String) -> List<String>

extern pub let to_list: (String) -> List<Char>

extern pub let from_list: (List<Char>) -> String

/// Casts a `Char` into a `String`
extern pub let from_char: (Char) -> String

extern pub let cons: (Char, String) -> String

extern pub let parse_int: (String) -> Option<Int>

extern pub let from_int: (Int) -> String
