import Char.{Char}
import Int.{Int}
import List.{List}
import Option.{Option}

/// A value representing an unicode string
extern pub type String

/// Concatenate two strings
/// 
/// ```kestrel
/// "abc" ++ "def" // => "abcdef"
/// ```
@extern
@type (String, String) -> String
pub let (++)

/// Returns the length of the string.
/// It takes `O(1)` time
/// 
/// ```kestrel
/// length("abc") // => 3
/// ```
@extern
@type (String) -> Int
pub let length

@extern
@type (String, Int) -> Option<Char>
pub let char_at

@extern
@type (String, String) -> List<String>
pub let split

@extern
@type (String) -> List<Char>
pub let to_list

@extern
@type (List<Char>) -> String
pub let from_list

/// Casts a `Char` into a `String`
@extern
@type (Char) -> String
pub let from_char

@extern
@type (Char, String) -> String
pub let cons

@extern
@type (String) -> Option<Int>
pub let parse_int

@extern
@type (Int) -> String
pub let from_int
