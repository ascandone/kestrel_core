//// This module contains functions used to create tests.
//// You can create assertion using the `Expect` module.
//// 
//// **note**: this module is temporary and will be removed from the `core` package

import Bool.{(==)}
import Expect.{Expectation}
import IO
import Int.{(+), (-)}
import List.{List(..)}
import Result.{Result(..)}
import String.{String, (++)}
import Task.{await}
import Time
import Tuple.{Unit(..)}

let color_reset_code = "\x1b[39m"

let dim = fn str {
  "\x1b[2m" ++ str ++ "\x1b[22m"
}

let col_bright_red = fn str {
  "\x1b[91m" ++ str ++ color_reset_code
}

let col_bright_green = fn str {
  "\x1b[92m" ++ str ++ color_reset_code
}

let underline = fn str {
  "\x1b[4m" ++ str ++ "\x1b[24m"
}

pub enum Test {
  Test(String, () -> Expectation),
  Concat(List<Test>),
  Describe(String, Test),
}

/// Test the given expectation
pub let test = Test

/// Concat many tests
pub let concat = Concat

/// Wrap a test within a description
pub let describe = fn descr, tests {
  Describe(descr, Concat(tests))
}

let test_recap = fn passed_count, failed_count, duration {
  let recap_msg =
    if failed_count == 0 {
      underline(col_bright_green("TEST RUN PASSED"))
    } else {
      underline(col_bright_red("TEST RUN FAILED"))
    }
  ;
  let duration_msg = dim("Duration: ") ++ String.from_int(duration) ++ "ms";
  let passed_msg = dim("Passed:   ") ++ String.from_int(passed_count);
  let failed_msg = dim("Failed:   ") ++ String.from_int(failed_count);
  recap_msg ++ "\n\n" ++ duration_msg ++ "\n" ++ passed_msg ++ "\n" ++ failed_msg
}

@extern
@type (() -> a) -> Result<a, String>
let unwrap_panic

let run_assertion = fn to_exp {
  match unwrap_panic(to_exp) {
    Err(e) => Err("The test threw an exception:\n" ++ e),
    Ok(exp) => Expect.to_result(exp),
  }
}

let collect_tests = fn suite, descr_stack {
  match suite {
    Describe(descr, test) => collect_tests(test, [descr, ..descr_stack]),
    Test(descr, exp) => match run_assertion(exp) {
      Ok(Unit) => Task.of((1, 0)),
      Err(failure_desc) => {
        let stack_msg = List.reduce_right(descr_stack, "", fn x, acc {
          acc ++ "↓ " ++ x ++ "\n"
        });
        let failure_msg = col_bright_red("✗ " ++ descr ++ "\n");
        let#await Unit = IO.println(
          dim(stack_msg) ++ failure_msg ++ failure_desc ++ "\n\n",
        );
        Task.of((0, 1))
      },
    },
    Concat(tests) => match tests {
      [] => Task.of((0, 0)),
      [hd, ..tl] => {
        let#await (hd_x, hd_y) = collect_tests(hd, descr_stack);
        let#await (tl_x, tl_y) = collect_tests(Concat(tl), descr_stack);
        Task.of((hd_x + tl_x, hd_y + tl_y))
      },
    },
  }
}

/// Run the tests and print the tests result.
/// Exits with the appropriate error code depending on the tests outcome
pub let run = fn test {
  let#await start_time = Time.now;
  let#await results = collect_tests(test, []);
  let#await end_time = Time.now;
  let (passed_count, failed_count) = results;
  let#await Unit = IO.println(
    test_recap(passed_count, failed_count, end_time - start_time),
  );
  if failed_count == 0 {
    Task.of(Unit)
  } else {
    IO.exit(1)
  }
}
