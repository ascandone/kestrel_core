import Bool.{Bool(..), (==), (!)}
import Debug
import List.{List(..)}
import Option.{Option(..)}
import Result.{Result(..)}
import String.{String, (++)}
import Tuple.{Unit(..)}

pub type Expectation {
  Pass,
  Fail(String),
  EqFail(String, String),
}

/// An expectation that always passes
pub let pass = Pass

/// An expectation that always fails with the given reason
pub let fail = Fail

/// Asserts that the given types are structurally equal. It uses `==` under the hood.
pub let equal = fn x, y {
  if x == y {
    Pass
  } else {
    EqFail(Debug.inspect(x), Debug.inspect(y))
  }
}

pub let ok = fn result {
  match result {
    Ok(_) => Expect.pass,
    Err(_) => EqFail(Debug.inspect(result), "Ok(_)"),
  }
}

pub let err = fn result {
  match result {
    Err(_) => Expect.pass,
    Ok(_) => EqFail(Debug.inspect(result), "Err(_)"),
  }
}

/// Converts the expectation to a result.
/// This function is meant to be used internally
pub let to_result = fn expectation {
  match expectation {
    Pass => Ok(Unit),
    Fail(reason) => Err(reason),
    EqFail(left, right) => {
      let l = "     Got:  " ++ left;
      let r = "Expected:  " ++ right;
      Err(l ++ "\n" ++ r)
    },
  }
}

pub let and_then = fn expectation, f {
  match expectation {
    Pass => f(Unit),
    _ => expectation,
  }
}

pub let all = fn expectations {
  match expectations {
    Pass :: expectations => all(expectations),
    failure :: _ => failure,
    Nil => Pass,
  }
}

pub let true = fn value, descr {
  if value {
    Pass
  } else {
    Fail(descr)
  }
}

pub let false = fn value, descr {
  true(!value, descr)
}
