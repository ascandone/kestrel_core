//// Internal module used for testing.
//// This will be removed in future versions of this package

import Bool.{Bool(..), (==), (||), (&&)}
import Char
import Debug
import Dict.{Dict}
import Expect
import Float.{(+.)}
import Int.{(+), (*), (-), Int}
import List.{List}
import Option.{Option(..)}
import Result.{Result(..)}
import Set
import String.{String}
import Test
import Tuple

@type Option<Int>
let int_none = None

@type List<Int>
let empty_int_list = []

@type Result<_, Int>
let showable_err = Ok(Some(42))

let debug_tests = Test.describe("Debug", [
  Test.describe("inspect", [
    Test.test("inspect True", fn {
      True
      |> Debug.inspect()
      |> Expect.equal("True")
    }),
    Test.test("inspect False", fn {
      False
      |> Debug.inspect()
      |> Expect.equal("False")
    }),
    Test.test("inspect int", fn {
      42
      |> Debug.inspect()
      |> Expect.equal("42")
    }),
    Test.test("inspect float", fn {
      42.2
      |> Debug.inspect()
      |> Expect.equal("42.2")
    }),
    Test.test("inspect float with trailing zero", fn {
      42.0
      |> Debug.inspect()
      |> Expect.equal("42.0")
    }),
    Test.test("inspect Tuple2", fn {
      (0, 42)
      |> Debug.inspect()
      |> Expect.equal("(0, 42)")
    }),
    Test.test("inspect Nil", fn {
      empty_int_list
      |> Debug.inspect()
      |> Expect.equal("[]")
    }),
    Test.test("inspect Cons list", fn {
      [1, 2, 3]
      |> Debug.inspect()
      |> Expect.equal("[1, 2, 3]")
    }),
    Test.test("inspect boxed value", fn {
      Some(True)
      |> Debug.inspect()
      |> Expect.equal("Some(True)")
    }),
    Test.test("inspect singleton", fn {
      int_none
      |> Debug.inspect()
      |> Expect.equal("None")
    }),
    Test.test("inspect strings", fn {
      "abc"
      |> Debug.inspect()
      |> Expect.equal("\"abc\"")
    }),
    Test.test("inspect chars", fn {
      Char.from_code(97)
      |> Debug.inspect()
      |> Expect.equal("\'a\'")
    }),
  ]),
])

let int_tests = Test.describe("Int", [
  Test.test("+ of ints", fn {
    1 + 2
    |> Expect.equal(3)
  }),
])

let float_tests = Test.describe("Float", [
  Test.test("+. of floats", fn {
    1.1 +. 2.1
    |> Expect.equal(3.2)
  }),
  Test.test("from_int", fn {
    Float.from_int(1)
    |> Expect.equal(1.0)
  }),
  Test.test("floor", fn {
    Float.floor(1.1)
    |> Expect.equal(1)
  }),
  Test.test("ceil", fn {
    Float.ceil(1.1)
    |> Expect.equal(2)
  }),
])

let bool_tests = Test.describe("Bool", [
  Test.describe("Logic &&", [
    Test.test("True && False", fn {
      True && True
      |> Expect.equal(True)
    }),
    Test.test("True && False", fn {
      True && False
      |> Expect.equal(False)
    }),
  ]),
  Test.describe("Logic ||", [
    Test.test("True || False", fn {
      True || True
      |> Expect.equal(True)
    }),
    Test.test("True || False", fn {
      True || False
      |> Expect.equal(True)
    }),
  ]),
  Test.describe("structural equality", [
    Test.test("of strings that are equal", fn {
      Some("ab") == Some("ab")
      |> Expect.equal(True)
    }),
    Test.test("of strings that are not equal", fn {
      Some("ab") == Some("abc")
      |> Expect.equal(False)
    }),
    Test.test("of chars that are equal", fn {
      Some('a') == Some('a')
      |> Expect.equal(True)
    }),
    Test.test("of chars that are not equal", fn {
      Some('a') == Some('b')
      |> Expect.equal(False)
    }),
    Test.test("of boxed type that are equal", fn {
      Some(42) == Some(42)
      |> Expect.equal(True)
    }),
    Test.test("of boxed type that are not equal", fn {
      Some(42) == Some(100)
      |> Expect.equal(False)
    }),
    Test.test("of nested types that are equal", fn {
      showable_err == showable_err
      |> Expect.equal(True)
    }),
    Test.test("of different variants", fn {
      Some(42) == None
      |> Expect.equal(False)
    }),
  ]),
])

let char_tests = Test.describe("Char", [
  Test.describe("from_code", [
    Test.test("of alpha char", fn {
      let code = 123;
      Char.from_code(code)
      |> Char.to_code()
      |> Expect.equal(code)
    }),
  ]),
  Test.describe("to_code", [
    Test.test("of alpha char", fn {
      Char.to_code('a')
      |> Expect.equal(97)
    }),
  ]),
  Test.describe("is_lower", [
    Test.test("returns True on lowercase chars", fn {
      'x'
      |> Char.is_lower()
      |> Expect.equal(True)
    }),
    Test.test("returns False on uppercase chars", fn {
      'X'
      |> Char.is_lower()
      |> Expect.equal(False)
    }),
  ]),
  Test.describe("is_upper", [
    Test.test("returns False on lowercase chars", fn {
      'x'
      |> Char.is_upper()
      |> Expect.equal(False)
    }),
    Test.test("returns True on uppercase chars", fn {
      'X'
      |> Char.is_upper()
      |> Expect.equal(True)
    }),
  ]),
  Test.describe("is_alpha", [
    Test.test("returns False on nums", fn {
      '2'
      |> Char.is_alpha()
      |> Expect.equal(False)
    }),
    Test.test("returns True on letters", fn {
      'x'
      |> Char.is_alpha()
      |> Expect.equal(True)
    }),
  ]),
])

let string_tests = Test.describe("String", [
  Test.describe("length", [
    Test.test("of a non-empty string", fn {
      String.length("abc")
      |> Expect.equal(3)
    }),
  ]),
  Test.describe("char_at", [
    Test.test("is None when index is higher than string's lenght", fn {
      String.char_at("abc", 3)
      |> Expect.equal(None)
    }),
    Test.test("is None when index is lower than 0", fn {
      String.char_at("abc", 0 - 1)
      |> Expect.equal(None)
    }),
    Test.test("returns the char otherwise", fn {
      String.char_at("abc", 1)
      |> Expect.equal(Some('b'))
    }),
  ]),
  Test.describe("parse_int", [
    Test.test("when the input is an int", fn {
      String.parse_int("42")
      |> Expect.equal(Some(42))
    }),
    Test.test("when the input is not a number", fn {
      String.parse_int("abc")
      |> Expect.equal(None)
    }),
    Test.test("when input is a float", fn {
      String.parse_int("42.2")
      |> Expect.equal(None)
    }),
  ]),
  Test.describe("split", [
    Test.test("empty string", fn {
      String.split("", "-")
      |> Expect.equal([""])
    }),
    Test.test("split string", fn {
      String.split("ab-cde-fg", "-")
      |> Expect.equal(["ab", "cde", "fg"])
    }),
  ]),
  Test.describe("to_list", [
    Test.test("returns an empty list when string is empty", fn {
      ""
      |> String.to_list()
      |> Expect.equal([])
    }),
    Test.test("returns the list of chars when string is not empty", fn {
      "abc"
      |> String.to_list()
      |> Expect.equal(['a', 'b', 'c'])
    }),
  ]),
  Test.describe("from_list", [
    Test.test("returns an empty string from the empty list", fn {
      []
      |> String.from_list()
      |> Expect.equal("")
    }),
    Test.test("returns a non empty str", fn {
      ['a', 'b', 'c']
      |> String.from_list()
      |> Expect.equal("abc")
    }),
  ]),
  Test.describe("from_char", [
    Test.test("returns a string", fn {
      'a'
      |> String.from_char()
      |> Debug.inspect()
      |> Expect.equal("\"a\"")
    }),
  ]),
])

let option_tests = Test.describe("Option", [
  Test.describe("map", [
    Test.test("of Some", fn {
      Some(100)
      |> Option.map(fn x {
        x + 1
      })
      |> Expect.equal(Some(101))
    }),
    Test.test("of None", fn {
      None
      |> Option.map(fn x {
        x + 1
      })
      |> Expect.equal(None)
    }),
  ]),
  Test.describe("map2", [
    Test.test("Some and Some", fn {
      Option.map2(Some(10), Some(20), fn a, b {
        a + b
      })
      |> Expect.equal(Some(30))
    }),
    Test.test("None and Some", fn {
      Option.map2(None, Some(20), fn a, b {
        a + b
      })
      |> Expect.equal(None)
    }),
  ]),
])

let list_tests = Test.describe("List", [
  Test.describe("List.range", [
    Test.test("empty", fn {
      List.range(0, 2)
      |> Expect.equal([0, 1])
    }),
    Test.test("not empty", fn {
      List.range(0, 3)
      |> Expect.equal([0, 1, 2])
    }),
  ]),
  Test.describe("List.find", [
    Test.test("on an empty list", fn {
      List.find(empty_int_list, fn _ {
        False
      })
      |> Expect.equal(None)
    }),
    Test.test("when value is not found", fn {
      List.find([1, 2, 3], fn _ {
        False
      })
      |> Expect.equal(None)
    }),
    Test.test("when value is found", fn {
      List.find([1, 2, 3], fn x {
        x == 2
      })
      |> Expect.equal(Some(2))
    }),
  ]),
  Test.describe("List.map", [
    Test.test("empty", fn {
      List.map([0, 1, 2], fn x {
        x * 10
      })
      |> Expect.equal([0, 10, 20])
    }),
    Test.test("not empty", fn {
      List.range(0, 3)
      |> Expect.equal([0, 1, 2])
    }),
  ]),
  Test.describe("List.zip", [
    Test.test("when the first list is shorter, truncate the second", fn {
      List.zip([0, 1], ["a", "b", "c", "d"])
      |> Expect.equal([(0, "a"), (1, "b")])
    }),
    Test.test("when the second list is shorter, truncate the first", fn {
      List.zip([0, 1, 2], ["a"])
      |> Expect.equal([(0, "a")])
    }),
    Test.test("same len", fn {
      List.zip([0, 1], ["a", "b"])
      |> Expect.equal([(0, "a"), (1, "b")])
    }),
  ]),
  Test.describe("List.reverse", [
    Test.test("on the empty list", fn {
      List.reverse(empty_int_list)
      |> Expect.equal(empty_int_list)
    }),
    Test.test("on a non empty list", fn {
      List.reverse([1, 2, 3])
      |> Expect.equal([3, 2, 1])
    }),
  ]),
  Test.describe("List comprehnsion", [
    Test.test("flat_map + guard", fn {
      let comprehension = {
        let#List.flat_map x = [1, 2];
        let#List.flat_map y = ['a', 'b'];
        let#List.guard _unit = x == 1;
        [(x, y)]
      };
      Expect.equal(comprehension, [(1, 'a'), (1, 'b')])
    }),
  ]),
])

type Person struct {
  name: String,
  age: Int,
}

type Dog struct {
  name: String,
  age: Int,
}

let struct_tests = Test.describe("structs", [
  Test.test("read field", fn {
    let p = Person {
      name: "hello",
      age: 42,
    };
    p.name
    |> Expect.equal("hello")
  }),
  Test.test("update struct", fn {
    let p1 = Person {
      name: "hello",
      age: 42,
    };
    let p2 = Person {
      age: p1.age + 1,
      ..p1
    };
    p2.age
    |> Expect.equal(43)
  }),
])

@type Dict<Int, String>
let int_str_empty_dict = Dict.empty

let dict_tests = Test.describe("Dict", [
  Test.test("member of empty set is False", fn {
    int_str_empty_dict
    |> Dict.get(42)
    |> Expect.equal(None)
  }),
  Test.test("insert once", fn {
    Dict.empty
    |> Dict.insert(42, "42")
    |> Dict.get(42)
    |> Expect.equal(Some("42"))
  }),
  Test.test("insert once and search for higher number", fn {
    Dict.empty
    |> Dict.insert(42, "42")
    |> Dict.get(100)
    |> Expect.equal(None)
  }),
  Test.test("insert once and search for lower number", fn {
    Dict.empty
    |> Dict.insert(42, "42")
    |> Dict.get(1)
    |> Expect.equal(None)
  }),
  Test.test("insert higher number", fn {
    let dict = {
      Dict.empty
      |> Dict.insert(0, "0")
      |> Dict.insert(1, "1")
    };

    Expect.all([
      dict
      |> Dict.get(0)
      |> Expect.equal(Some("0")),
      dict
      |> Dict.get(1)
      |> Expect.equal(Some("1")),
    ])
  }),
  Test.test("insert lower number", fn {
    let dict = {
      Dict.empty
      |> Dict.insert(10, "10")
      |> Dict.insert(1, "1")
    };
    Expect.all([
      dict
      |> Dict.get(10)
      |> Expect.equal(Some("10")),
      dict
      |> Dict.get(1)
      |> Expect.equal(Some("1")),
    ])
  }),
  Test.test("compute size of a dict", fn {
    let dict = {
      Dict.empty
      |> Dict.insert(10, "10")
      |> Dict.insert(20, "20")
      |> Dict.insert(30, "30")
      |> Dict.insert(11, "11")
      |> Dict.insert(50, "50")
      |> Dict.insert(50, "50")
      |> Dict.insert(50, "50")
      |> Dict.insert(50, "50")
    };

    dict
    |> Dict.size()
    |> Expect.equal(5)
  }),
  Test.test("returns sorted list of values", fn {
    let dict = {
      Dict.empty
      |> Dict.insert(10, "10")
      |> Dict.insert(50, "50")
      |> Dict.insert(20, "20")
      |> Dict.insert(30, "30")
    };

    dict
    |> Dict.to_list()
    |> Expect.equal([(10, "10"), (20, "20"), (30, "30"), (50, "50")])
  }),
])

let set_tests = Test.describe("Set", [
  Test.test("member of empty set is False", fn {
    Set.empty
    |> Set.member(42)
    |> Expect.equal(False)
  }),
  Test.test("insert once", fn {
    Set.empty
    |> Set.insert(42)
    |> Set.member(42)
    |> Expect.equal(True)
  }),
  Test.test("insert once and search for higher number", fn {
    Set.empty
    |> Set.insert(42)
    |> Set.member(100)
    |> Expect.equal(False)
  }),
  Test.test("insert once and search for lower number", fn {
    Set.empty
    |> Set.insert(42)
    |> Set.member(1)
    |> Expect.equal(False)
  }),
  Test.test("insert higher number", fn {
    let tree = {
      Set.empty
      |> Set.insert(0)
      |> Set.insert(1)
    };
    Expect.all([
      tree
      |> Set.member(0)
      |> Expect.true("0 should be member"),
      tree
      |> Set.member(1)
      |> Expect.true("1 should be member"),
    ])
  }),
  Test.test("insert lower number", fn {
    let tree = {
      Set.empty
      |> Set.insert(10)
      |> Set.insert(1)
    };
    Expect.all([
      tree
      |> Set.member(10)
      |> Expect.true("10 should be member"),
      tree
      |> Set.member(1)
      |> Expect.true("1 should be member"),
    ])
  }),
  Test.test("compute size of a set", fn {
    let set = {
      Set.empty
      |> Set.insert(10)
      |> Set.insert(20)
      |> Set.insert(30)
      |> Set.insert(11)
      |> Set.insert(50)
      |> Set.insert(50)
      |> Set.insert(50)
      |> Set.insert(50)
    };

    set
    |> Set.size()
    |> Expect.equal(5)
  }),
  Test.test("returns sorted list of values", fn {
    let set = {
      Set.empty
      |> Set.insert(10)
      |> Set.insert(50)
      |> Set.insert(20)
      |> Set.insert(30)
    };

    set
    |> Set.to_list()
    |> Expect.equal([10, 20, 30, 50])
  }),
])

pub let main = {
  [
    debug_tests,
    int_tests,
    float_tests,
    bool_tests,
    char_tests,
    string_tests,
    option_tests,
    list_tests,
    struct_tests,
    dict_tests,
    set_tests,
  ]
  |> Test.concat()
  |> Test.run()
}
