import Basics
import Expect
import IO
import Test

let basics_test = Test.describe("Basics", [
  Test.test("+ of ints", {
    1 + 2
    |> Expect.equal(3)
  }),
  Test.test("+. of floats", {
    1.1 +. 2.1
    |> Expect.equal(3.2)
  }),
  Test.describe("Logic &&", [
    Test.test("True && False", {
      True && True
      |> Expect.equal(True)
    }),
    Test.test("True && False", {
      True && False
      |> Expect.equal(False)
    }),
  ]),
  Test.describe("Logic ||", [
    Test.test("True || False", {
      True || True
      |> Expect.equal(True)
    }),
    Test.test("True || False", {
      True || False
      |> Expect.equal(True)
    }),
  ]),
  Test.describe("structural equality", [
    Test.test("of boxed type that are equal", {
      Just(42) == Just(42)
      |> Expect.equal(True)
    }),
    Test.test("of boxed type that are not equal", {
      Just(42) == Just(100)
      |> Expect.equal(False)
    }),
    Test.test("of nested types that are equal", {
      Ok(Just(42)) == Ok(Just(42))
      |> Expect.equal(True)
    }),
    Test.test("of different variants", {
      Just(42) == Nothing
      |> Expect.equal(False)
    }),
  ]),
])

let string_tests = Test.describe("String", [
  Test.describe("length", [
    Test.test("of a non-empty string", {
      String.length("abc")
      |> Expect.equal(3)
    }),
  ]),
  Test.describe("parse_int", [
    Test.test("when the input is an int", {
      String.parse_int("42")
      |> Expect.equal(Just(42))
    }),
    Test.test("when the input is not a number", {
      String.parse_int("abc")
      |> Expect.equal(Nothing)
    }),
    Test.test("when input is a float", {
      String.parse_int("42.2")
      |> Expect.equal(Nothing)
    }),
  ]),
  Test.describe("split", [
    Test.test("empty string", {
      String.split("", "-")
      |> Expect.equal([""])
    }),
    Test.test("split string", {
      String.split("ab-cde-fg", "-")
      |> Expect.equal(["ab", "cde", "fg"])
    }),
  ]),
])

let maybe_tests = Test.describe("Maybe", [
  Test.describe("map", [
    Test.test("of Just", {
      Just(100)
      |> Maybe.map(fn x {
        x + 1
      })
      |> Expect.equal(Just(101))
    }),
    Test.test("of Nothing", {
      Nothing
      |> Maybe.map(fn x {
        x + 1
      })
      |> Expect.equal(Nothing)
    }),
  ]),
  Test.describe("map2", [
    Test.test("Just and Just", {
      Maybe.map2(Just(10), Just(20), fn a, b {
        a + b
      })
      |> Expect.equal(Just(30))
    }),
    Test.test("Nothing and Just", {
      Maybe.map2(Nothing, Just(20), fn a, b {
        a + b
      })
      |> Expect.equal(Nothing)
    }),
  ]),
])

let list_tests = Test.describe("List", [
  Test.describe("List.range", [
    Test.test("empty", {
      List.range(0, 2)
      |> Expect.equal([0, 1])
    }),
    Test.test("not empty", {
      List.range(0, 3)
      |> Expect.equal([0, 1, 2])
    }),
  ]),
  Test.describe("List.find", [
    Test.test("on an empty list", {
      List.find([], fn _ {
        False
      })
      |> Expect.equal(Nothing)
    }),
    Test.test("when value is not found", {
      List.find([1, 2, 3], fn _ {
        False
      })
      |> Expect.equal(Nothing)
    }),
    Test.test("when value is found", {
      List.find([1, 2, 3], fn x {
        x == 2
      })
      |> Expect.equal(Just(2))
    }),
  ]),
  Test.describe("List.map", [
    Test.test("empty", {
      List.map([0, 1, 2], fn x {
        x * 10
      })
      |> Expect.equal([0, 10, 20])
    }),
    Test.test("not empty", {
      List.range(0, 3)
      |> Expect.equal([0, 1, 2])
    }),
  ]),
  Test.describe("List.zip", [
    Test.test("when the first list is shorter, truncate the second", {
      List.zip([0, 1], ["a", "b", "c", "d"])
      |> Expect.equal([(0, "a"), (1, "b")])
    }),
    Test.test("when the second list is shorter, truncate the first", {
      List.zip([0, 1, 2], ["a"])
      |> Expect.equal([(0, "a")])
    }),
    Test.test("same len", {
      List.zip([0, 1], ["a", "b"])
      |> Expect.equal([(0, "a"), (1, "b")])
    }),
  ]),
])

pub let main = {
  [basics_test, string_tests, maybe_tests, list_tests]
  |> Test.concat()
  |> Test.run()
}
